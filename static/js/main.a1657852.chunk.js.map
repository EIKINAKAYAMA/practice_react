{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","backgroundColor","backgroundcolor","value","Board","i","this","squares","winline","includes","board","row","j","num","push","renderSquare","React","Component","Game","toggleClick","selected","state","histories","findIndex","history","isToggleOn","jumpTo","length","setState","sort","a","b","Array","fill","point","step","slice","calculateWinner","forEach","concat","map","index","order","fontWeight","currentIndex","current","winner","line","status","moves","listCreate","handleClick","Math","floor","lines","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1657852.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()} style = {{backgroundColor : props.backgroundcolor}}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square key={`b${i}`} \n    value={this.props.squares[i]}\n    onClick ={() => this.props.onClick(i)}\n    backgroundcolor = {\n      this.props.winline ? this.props.winline.includes(i)?  \"blue\" : null :null //勝利時、勝利マスの色付け：勝利時、勝利外のマスの色付け：常時の色付け\n    }/>; //propsで渡す引数（value, onClick, color）\n  }\n  \n  // パラダイムについて考える\n  render() {\n    const board = [];\n    const boardline = 4;\n    \n    for(let i=0; i < boardline; i++){\n      const row = [];\n      for(let j = 0; j < boardline; j++){\n        const num = i * boardline + j;\n        row.push(this.renderSquare(num));\n      }\n      board.push(<div key={`a${i}`} className=\"board-row\">{row}</div>)\n    }\n\n    return (\n      <div>\n        { board }\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      histories:[{\n        squares: Array(16).fill(null),\n        point: -1,\n      }],\n      step: 0,\n      isToggleOn: true,\n    }\n  }\n\n  handleClick(i) {\n    const histories = (this.state.step !== this.state.histories.length - 1)\n      ? (this.state.isToggleOn \n        ? this.state.histories.slice(0, this.state.step + 1)\n        : this.state.histories.slice(-(this.state.step + 1), this.state.histories.length))\n      :this.state.histories.slice(0)\n    \n    const history = {\n      squares: this.state.isToggleOn ? histories[histories.length - 1].squares.slice(0) : histories[0].squares.slice(0),\n      point: i,\n      selected: false,\n    }\n\n    if(calculateWinner(history.squares) || history.squares[i]) {\n      return;\n    }\n\n\n    histories.forEach(history => history.selected = false)\n    history.squares[i] = histories.length % 2 === 0 ? 'O' : 'X';\n\n    this.setState({\n      histories: this.state.isToggleOn ? histories.concat([history]) : [history].concat(histories),\n      step: histories.length,\n    })    \n  }\n\n  toggleClick = () => {\n    const selected = this.state.histories.findIndex(history => history.selected === true); //既に選択されている配列があれば取得\n\n    if(selected !== -1){\n      this.state.isToggleOn \n      ? this.jumpTo(selected)\n      : this.jumpTo(this.state.histories.length -1 - selected)\n    }\n\n    this.setState({\n      histories: this.state.histories.sort((a, b) => { \n        return a > b? 1:-1\n      }),\n      isToggleOn: !this.state.isToggleOn\n    })\n\n  }\n\n  jumpTo(step){\n    const histories = this.state.histories.map((history, index) => {\n      history.selected = this.state.isToggleOn \n        ? index === step\n        : index === this.state.histories.length - 1 - step\n      return history;\n    })\n\n    this.setState({\n      histories: histories,\n      step: step,\n    })\n  }\n\n  listCreate(history, index){\n   const order = index ? `Go to index # ${index}` : 'Go to game start'\n   return (\n    <li key={index}>\n      <button  onClick={() => {\n        this.jumpTo(index);\n      }} style = {history.selected ? {fontWeight: 'bold'} : { fontWeight: 'normal'}} >{order}</button>\n    </li>\n   )\n  }\n\n  render() {\n    const histories = this.state.histories;\n    const currentIndex = histories.findIndex(history => history.selected === true)\n    const current = currentIndex !== -1 \n      ? (histories[currentIndex]) //履歴選択がある場合は、選択したものがCurrent\n      : (this.state.isToggleOn ? histories[histories.length - 1] : histories[0]) //履歴選択がない場合は、 昇降順に応じた最新歴がCurrent\n\n    const winner = calculateWinner(current.squares);\n    const winline = winner ? winner.line : null\n    const status = winner \n      ? (winner === \"Draw\"\n        ? winner\n        : \"Winner: \" + winner.winner )\n      :\"Next player: \" + (this.state.step % 2 === 0 ? \"X\" : \"O\");\n\n    const moves = histories.map((history, index) =>{ \n      return (this.listCreate(history, this.state.isToggleOn? index : (histories.length - 1) - index))\n    })\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={\n              this.state.isToggleOn \n                ?this.state.histories[this.state.step].squares\n                : this.state.histories[(this.state.histories.length - 1)- this.state.step].squares}\n            onClick={(i) => this.handleClick(i)}\n            winline= {winline}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>\n            { status }\n            { current.point !== -1 ? <p>Coordinate: (col:{current.point % 4 + 1}, row:{Math.floor(current.point/4 + 1)}, player: { this.state.step % 2 === 0 ? 'O' : 'X' })</p>\n              : <p>Let's play</p>}\n          </div>\n          <ol>{moves}</ol>\n          <button onClick={this.toggleClick}>\n            {this.state.isToggleOn ? '降順' : '昇順'}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [1, 2, 3],\n    [4, 5, 6],\n    [5, 6, 7],\n    [8, 9, 10],\n    [9, 10, 11],\n    [12, 13, 14],\n    [13, 14, 15],\n    [0, 4, 8],\n    [4, 8, 12],\n    [1, 5, 9],\n    [5, 9, 13],\n    [2, 6, 10],\n    [6, 10, 14],\n    [3, 7, 11],\n    [7, 11, 15],\n    [0, 5, 10],\n    [5, 10, 15],\n    [4, 9, 14],\n    [1, 6, 11],\n    [3, 6, 9],\n    [6, 9, 12],\n    [2, 5, 8],\n    [7, 10, 13],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    //squares[a],squares[b],squares[c]がすべて同じ値であれば、squares[a]を返す\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {winner: squares[a], line:lines[i]};\n    }\n  }\n\n  if(!squares.includes(null)) {\n    return 'Draw';\n  }\n\n  return null;\n}"],"sourceRoot":""}